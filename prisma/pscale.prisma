datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model User {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String

  respondents    Respondent[]
  questionnaires Questionnaire[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Respondent {
  id      String   @id @default(cuid())
  email   String   @unique
  name    String
  answers Answer[]

  reffererId      String
  refferer        User          @relation(fields: [reffererId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionnaireId String
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())

  @@map("respondents")
}

model Questionnaire {
  id          String              @id @default(cuid())
  name        String
  description String?             @db.LongText
  status      QuestionnaireStatus @default(DRAFT)
  expiresAt   DateTime?
  code        String              @unique
  theme       String              @default("106ebe") @db.Char(length: 6)
  questions   Question[]
  respondents Respondent[]
  answers     Answer[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("questionnaires")
}

model Question {
  id          String       @id @default(cuid())
  name        String
  description String?      @db.LongText
  order       Int?
  type        QuestionType @default(SHORT_TEXT)
  list        Json?        @default("[]")
  required    Boolean      @default(false)
  answers     Answer[]

  questionnaireId String
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  updatedAt DateTime @updatedAt

  @@map("questions")
}

model Answer {
  id              String        @id @default(cuid())
  questionnaireId String
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  respondentId    String
  respondent      Respondent    @relation(fields: [respondentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId      String
  question        Question      @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  answer          String
  answeredAt      DateTime      @default(now())

  @@map("answers")
}

enum QuestionType {
  TEXT
  SHORT_TEXT
  RADIO
  CHECKBOX
}

enum QuestionnaireStatus {
  ACTIVE
  CLOSED
  DRAFT
  PUBLISHED
}
